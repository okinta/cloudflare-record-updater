#!/usr/bin/env bash

#
# `args.m4` is the argbash template used to generate `args.sh`.
#
# `args.sh` defines the command line arguments for `cf-update.sh`.
#
# To generate `args.sh`, run:
#
#     argbash -o args.sh args.m4
#

# ARG_OPTIONAL_SINGLE([cloudflare-url],[],[The Cloudflare API URL],[https://api.cloudflare.com/client/v4/])
# ARG_POSITIONAL_SINGLE([auth-email],[The email used to login])
# ARG_POSITIONAL_SINGLE([auth-key],[Your Cloudflare API key])
# ARG_POSITIONAL_SINGLE([domain],[The domain to update])
# ARG_POSITIONAL_SINGLE([name],[The name of the A record to update])
# ARG_POSITIONAL_SINGLE([value],[The value to update the record to])
# ARG_DEFAULTS_POS()
# ARG_HELP([Updates a DNS record for Cloudflare])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_auth_email=
_arg_auth_key=
_arg_domain=
_arg_name=
_arg_value=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_cloudflare_url="https://api.cloudflare.com/client/v4/"


print_help()
{
	printf '%s\n' "Updates a DNS record for Cloudflare"
	printf 'Usage: %s [--cloudflare-url <arg>] [-h|--help] <auth-email> <auth-key> <domain> <name> <value>\n' "$0"
	printf '\t%s\n' "<auth-email>: The email used to login"
	printf '\t%s\n' "<auth-key>: Your Cloudflare API key"
	printf '\t%s\n' "<domain>: The domain to update"
	printf '\t%s\n' "<name>: The name of the A record to update"
	printf '\t%s\n' "<value>: The value to update the record to"
	printf '\t%s\n' "--cloudflare-url: The Cloudflare API URL (default: 'https://api.cloudflare.com/client/v4/')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--cloudflare-url)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_cloudflare_url="$2"
				shift
				;;
			--cloudflare-url=*)
				_arg_cloudflare_url="${_key##--cloudflare-url=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'auth-email', 'auth-key', 'domain', 'name' and 'value'"
	test "${_positionals_count}" -ge 5 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 5 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 5 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 5 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_auth_email _arg_auth_key _arg_domain _arg_name _arg_value "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
# ] <-- needed because of Argbash
